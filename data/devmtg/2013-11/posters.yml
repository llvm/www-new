posters:
- title: "Finding a few needles in some large haystacks: Identifying missing target optimizations using a superoptimizer"
  speaker: "Hal Finkel (Argonne National Laboratory)"
  slides_url: "https://llvm.org/devmtg/2013-11/slides/Finkel-Poster.pdf"
  video_url: ""
  description: "So you're developing an LLVM backend, and you've added a bunch of TableGen patterns, custom DAG combines and other lowering code; are you done? This poster describes the development of a specialized superoptimizer, applied to the output of the compiler on large codebases, to look for missing optimizations in the PowerPC backend. This superoptimizer extracts potentially-interesting instruction sequences from assembly code, and then uses the open-source CVC4 SMT solver to search for provably-correct shorter alternatives."

- title: "Intel® AVX-512 Architecture. Comprehensive vector extension for HPC and enterprise"
  speaker: "Elena Demikhovsky (Intel® Software and Services Group - Israel)"
  slides_url: "https://llvm.org/devmtg/2013-11/slides/Demikhovsky-Poster.pdf"
  video_url: ""
  description: "Knights Landing (KNL) is the second generation of the Intel® MIC architecture-based products. KNL will support Intel® Advanced Vector Extensions 512 instruction set architecture, a significant leap in SIMD support. This new ISA, designed with unprecedented level of richness, offers a new level of support and opportunities for vectorizing compilers to target efficiently. The poster presents Intel® AVX-512 ISA and shows how the new capabilities may be used in LLVM compiler."

- title: "Fracture: Inverting the Target Independent Code Generator"
  speaker: "Richard T. Carback III (Charles Stark Draper Laboratories)"
  slides_url: "https://llvm.org/devmtg/2013-11/slides/Carback-Poster.pdf"
  video_url: ""
  description: "Fracture is a TableGen backend and associated library that ingests a basic block of target instructions and emits a DAG which resembles the post-legalization phase of LLVM’s SelectionDAG instruction selection process. It leverages the pre-existing target TableGen definitions, without modification, to provide a generic way to abstract LLVM IR efficiently from different target instruction sets. Fracture can speed up a variety of applications and also enable generic implementations of a number of static and dynamic analysis tools. Examples include interactive debuggers or disassemblers that provide LLVM IR representations to users unfamiliar with the instruction set, static analysis algorithms that solve indirect control transfer (ICT) problems modified for IR to use KLEE or other LLVM technologies, and IR-based decompilers or emulators extended to work on machine binaries."

- title: "Automatic generation of LLVM backends from LISA"
  speaker: "Jeroen Dobbelaere (Synopsys)"
  slides_url: "https://llvm.org/devmtg/2013-11/slides/Dobbelaere-Poster.pdf"
  video_url: ""
  description: "LISA (language for instruction-set architectures) allows for the efficient specification of processor architectures, including non-standard, customized architectures. Using a LISA input specification designers can automatically generate instruction-set simulator, assembler, linker, debugger interface as well as RTL. We have extended LISA to allow for the generation of a LLVM compiler backend tailored to the custom architecture. This work includes the development of a new scheduler that is able to handle hazards with high latency and delay slots, expanding the applicability of LLVM to a wider range of architectures. The LISA-based design flow allows for rapid architectural explorations, profiling dozens of different processors architectures within hours, with the automatic generation of a LLVM compiler being a key enabler of this design methodology."

- title: "clad - Automatic Differentiation with Clang"
  speaker: "Violeta Ilieva (Princeton University), Vassil Vassilev (CERN)"
  slides_url: "https://llvm.org/devmtg/2013-11/slides/Vassilev-Poster.pdf"
  video_url: ""
  description: "Automatic differentiation (AD) evaluates the derivative of a function specified in a computer program by applying a set of techniques to change the semantics of that function. Unlike other methods for differentiation, such as numerical and symbolic, AD yields machine-precision derivatives even of complicated functions at relatively low processing and storage costs. We would like to present our AD tool, clad - a clang plugin that derives C++ functions through implementing source code transformation and employing the chain rule of differential calculus in its forward mode. That is, clad decomposes the original functions into elementary statements and generates their derivatives with respect to the user-defined independent variables. The combination of these intermediate expressions forms additional source code, built through modifying clang’s abstract syntax tree (AST) along the control flow. Compared to other tools, clad has the advantage of relying on clang and llvm modules for parsing the original program. It uses clang's plugin mechanism for constructing the derivative's AST representation, for generating executable code, and for performing global analysis. Thus it results in low maintenance, high compatibility, and excellent performance."
