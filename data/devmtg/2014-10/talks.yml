talks:
  - title: "OpenMP Support in Clang/LLVM: Status Update and Future Directions"
    speaker: "Alexey Bataev - Intel, Zinovy Nis - Intel"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Bataev-OpenMP.pdf"
    video_url: "https://youtu.be/OI2Ccucy73Q"
    description: "OpenMP is a well-known and widely used API for shared-memory parallelism. Support for OpenMP in Clang/LLVM compiler is currently under development. In this talk, we will present current status of OpenMP support, what is done and what remains to be done, technical details behind OpenMP implementation. Also, we will elaborate on accelerators and pragma-assisted SIMD vectorization, introduced in the latest 4.0 edition of the OpenMP standard."

  - title: "Alive: Provably Correct InstCombine Optimizations"
    speaker: "Nuno Lopes - Microsoft Research, David Menendez - Rutgers University, Santosh Nagarakatte - Rutgers University, John Regehr - University of Utah"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Menendez-Alive.pdf"
    video_url: "https://youtu.be/iV5jBtE35r4"
    description: "Optimizations are hard to get right. Even seemingly innocuous transformations in InstCombine can miss important corner cases. With Alive, you can specify peephole optimizations in a friendly, LLVM-like language, automatically determine their correctness, and generate the corresponding C++ code."

  - title: "LLVM Stable Releases"
    speaker: "Tom Stellard - Advanced Micro Devices"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Stellard-llvm-stable-releases2014.pdf"
    video_url: "https://youtu.be/9h5Zx_mO2tI"
    description: "This talk will cover LLVM stable releases, how they work, who uses them, and how we can make them better."

  - title: "Supporting Precise Relocating Garbage Collection in LLVM"
    speaker: "Philip Reames - Azul Systems, Sanjoy Das - Azul Systems"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Reames-GarbageCollection.pdf"
    video_url: "https://youtu.be/mdVR0RYJQ9w"
    description: "Generating efficient code that is compatible with common high performance garbage collector implementations will strengthen LLVM's ability to support languages with managed runtime environments. To support this common use case, we have built and are in the process of contributing a safepoint insertion pass which can rewrite optimized IR into a form which respects the invariants required by a fully relocating garbage collector, and a set of intrinsics which enable work towards efficient lowering of safepoints."

  - title: "Source Code Analysis for Security through LLVM"
    speaker: "Lu Zhao - HP Fortify"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Zhao-SourceCodeAnalysisforSecurity.pdf"
    video_url: "https://youtu.be/xSN0J_JV06E"
    description: "We added a new debug mode for the Clang compiler which emits extra metadata in the LLVM bitcode. The metadata has turned the bitcode into a useful vehicle from which an intermediate representation for secure source code analysis can be derived. We have used this approach to find security vulnerabilities in the Objective-C source code."

  - title: "FTL: WebKit's LLVM based JIT"
    speaker: "Andrew Trick - Apple, Juergen Ributzka - Apple"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Trick-FTL.pdf"
    video_url: "https://youtu.be/bnY5FVxHUVc"
    description: "FTL is the fourth-tier LLVM JIT that powers JavaScript in WebKit. We will talk about our experiences using LLVM to build this high-performance JIT. We will explain the motivation for new LLVM features, including patchpoints and a new form of stack maps, and will share our vision on future work and the direction we would like LLVM move to become a better platform for JIT clients."

  - title: "Virtual Ghost: Using LLVM to Protect Applications from a Compromised Operating System"
    speaker: "John Criswell - University of Rochester"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Criswell-VirtualGhost.pdf"
    video_url: "https://youtu.be/iVwShAxImHE"
    description: "This talk presents an LLVM-based system named Virtual Ghost that protects applications from a compromised operating system kernel. Virtual Ghost uses compiler instrumentation to protect application data from spying and corruption from the operating system kernel. It also uses an extended version of the LLVM instruction set to restrict how the operating system kernel can interact with the hardware, preventing the operating system kernel from using hardware configuration to corrupt application control-flow or to bypass the application data protection guarantees."

  - title: "What does it take to make LLVM as performant as GCC"
    speaker: "James Molloy - ARM, Ana Pazos - QuIC, Yin Ma - QuIC"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Molloy-LLVM-Performant-As-GCC-llvm-dev-2014.pdf"
    video_url: "https://youtu.be/EsNMa9nxLOk"
    description: "For the past 7 months Qualcomm and ARM have jointly been analyzing and improving performance for the AArch64 architecture in LLVM, based on a differential analysis against GCC. This talk aims to provide information on the areas that we're currently lacking compared to GCC, along with the progress that we've made so far."

  - title: "Blowing up the Atomic Barrier"
    speaker: "Robin Morisset - Google, JF Bastien - Google"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Morisset-AtomicsPresentation.pdf"
    video_url: "https://youtu.be/cDM6Gr_XzGI"
    description: "Atomics in C11 and C++11 let the programmer express the guarantees needed for racy accesses in lock-free code, in theory bringing a zero-cost abstraction for parallelism to the language. This talk will showcase how you can use atomics today and where the abstraction breaks down. We'll focus on LLVM's recent improvements for atomics that provide significant performance gains on ARMv7, Power and x86. Finally we'll discuss some extremely non-intuitive behaviors of atomics, how atomics in C++ may evolve, and how it may impact LLVM."

  - title: "The LLVM Pass Manager, Part 2"
    speaker: "Chandler Carruth - Google"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Carruth-TheLLVMPassManagerPart2.pdf"
    video_url: "https://youtu.be/6NDQl544yEg"
    description: "I will present a new design and implementation of the LLVM pass manager that is currently being developed in the tree. I will cover how it differs from the previous implementation and how those differences allow it to solve many of the long-standing limitations of the current implementation. I will discuss in depth how the new system supports richer analysis dependencies, flexible composition of function-level analyses and module- or call-graph-level transformations."

  - title: "Supporting Vector Programming on a Bi-Endian Processor Architecture"
    speaker: "Bill Schmidt - IBM, Michael Gschwind - IBM"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Schmidt-SupportingVectorProgramming.pdf"
    video_url: "https://youtu.be/y_YU5CxrxNo"
    description: "The POWER instruction set architecture is designed to support both big-endian and little-endian memory models. However, many of the instructions designed for vector support assume that vector elements in registers appear in big endian order, that is, with the lowest-numbered vector element in the most significant portion of the register. This talk will outline some of the issues faced in designing a sensible vector programming model on a bi-endian architecture with a big-endian bias, and how we've addressed them."

  - title: "Intrinsics, Metadata and Attributes: Now, more than ever!"
    speaker: "Hal Finkel - Argonne National Laboratory"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Finkel-IntrinsicsMetadataAttributes.pdf"
    video_url: "https://youtu.be/Zyeey4gkIg8"
    description: "Over the past year, LLVM has grown several new ways to communicate important information to the optimizer: An @llvm.assume intrinsic function to provided additional truths, scoped-noalias metadata to provided explicit pointer aliasing sets, and parameter attributes that specify pointer alignment, dereferenceability, and more. I'll explain the semantics of many of these new features, their intended uses, and a few ways they shouldn't be used."

  - title: "Implementing Data Layout Optimizations in LLVM Framework"
    speaker: "Prashantha NR - Compiler Tree Technologies, Vikram TV - Compiler Tree Technologies, Vaivaswatha N - Compiler Tree Technologies"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Prashanth-DLO.pdf"
    video_url: "https://youtu.be/Ckzole3hArc"
    description: "Modern server workloads are limited by memory bandwidth. For regular accesses like loops, people change the loop iterations to change the access pattern; thereby gaining locality. Another way to alleviate the memory bottleneck is to change the data layout organization for better locality. In this talk we will speak about memory layout optimizations like Structure Splitting, Instance Interleaving, Struct Array copy, Array Remapping in LLVM compiler framework."

  - title: "Fuzzing Clang to Find ABI Bugs"
    speaker: "David Majnemer - Google"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Majnemer-FuzzingClang.pdf"
    video_url: "https://youtu.be/0yUzo-pBkFk"
    description: "Correctly implementing C++ is very hard, bugs can arise from incredibly subtle interactions of different language features. In this talk, we will discuss how we used fuzzing to dramatically increase the reliability of Clang's ABI-specific code."

  - title: "A closer look at ARM code quality"
    speaker: "Tilmann Scheller - Samsung Electronics"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Scheller-ARMCodeQuality.pdf"
    video_url: "https://youtu.be/1DM2Q75qDSU"
    description: "This talk presents current performance numbers for the SPEC CPU benchmark suites on ARM, comparing the performance of LLVM and GCC, with the main focus on the SPEC CPU integer benchmarks. To dive a little bit deeper, we will also have a closer look at the generated assembly code of selected benchmarks where LLVM is performing worse than GCC. We will use the results of this performance analysis to point out potential code generation opportunities for LLVM."

  - title: "Implementation of global instruction scheduling in LLVM infrastructure"
    speaker: "Sergei Larin - QuIC, Aditya Kumar - QuIC"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Larin-GlobalInstructionScheduling.pdf"
    video_url: "https://youtu.be/A88vO_lP5b8"
    description: "Discuss perspectives and tradeoffs in implementation of global instruction scheduling and support for it in the LLVM infrastructure. Present and discuss relative QuIC experience."

  - title: "Skip the FFI: Embedding Clang for C Interoperability"
    speaker: "Jordan Rose - Apple, John McCall - Apple"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Skip the FFI.pdf"
    video_url: "https://youtu.be/_xAqf-VwaOM"
    description: "Most languages that aren't a superset of C provide a Foreign Function Interface (FFI) that allows one to interface with existing C libraries. FFIs are often an afterthought, requiring manual or source-to-source translation from C header files to a subset of the target language, resulting in complicated build processes, frequent manual tweaking, and numerous implementation challenges. This talk will discuss an alternative approach that embeds Clang into an LLVM-based compiler front end to provide C compatibility without the traditional FFI."

  - title: "Custom Hardware State-Machines and Datapaths: Using LLVM to Generate FPGA Accelerators"
    speaker: "Alan Baker - Altera Corporation"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Baker-CustomHardwareStateMachines.pdf"
    video_url: "https://youtu.be/DGWFQXK_EU4"
    description: "Altera Corporation's OpenCL compiler uses LLVM to generate FPGA accelerators. In order to generate efficient hardware, many transformations were implemented. The key transformations will be discussed, emphasizing the FPGA vs CPU architectural differences that motivate them."

  - title: "Controlling Virtual Register Pressure in LLVM Middle-End"
    speaker: "Ivan Baev - QuIC"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Baev-Controlling_VRP.pdf"
    video_url: "https://youtu.be/lJmXiwJo2ZQ"
    description: "Enabling new compiler optimizations or compiling at higher optimization levels do not necessarily improve performance. One common reason is the increased register pressure that results in an increased amount of spill code. We analyze several LLVM target-independent optimizations with respect to register pressure. We then describe algorithms for controlling register pressure in LICM and GVN and report their positive impact on run-time performance."

  - title: "Indexing Large, Mixed-Language Codebases"
    speaker: "James Dennett - Google, Luke Zarko - Google"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Zarko-IndexingLargeMixedLang.pdf"
    video_url: "https://youtu.be/KDiXo5GwQ-U"
    description: "The Kythe project aims to establish open data formats and protocols for interoperable developer tools. In this talk, we will introduce the Kythe model as it applies to C++14, concentrating on features required for generating cross-references. In the process, we will discuss how the Clang front-end was instrumental in developing an indexing tool that produces Kythe data describing C++ source code."

  - title: "Architecture Specific Code Generation and Function Multiversioning"
    speaker: "Eric Christopher - Google"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Christopher-Function Multiversioning Talk.pdf"
    video_url: "https://youtu.be/iAaoGsCVeCI"
    description: "A talk on microarchitecture dependent optimization and code generation for individual functions, the changes that have been necessary to enable it, and function multiversioning as the next step."

  - title: "Frappé: Using Clang to Query and Visualize Large Codebases"
    speaker: "Nathan Hawes - Oracle, Ben Barham - Oracle"
    slides_url: "https://llvm.org/devmtg/2014-10/Slides/Hawes-Frappe.pdf"
    video_url: "https://youtu.be/xelhxXfqngc"
    description: "Frappé is a new tool to support developers with a range of code comprehension queries in multi-million line codebases, from 'Does function X or something it calls write to global variable Y?' to 'How much code could be affected if I change this macro?'. Results are overlaid on a visualisation of the code based on a cartographic map, where the continent/country/state hierarchy corresponds to the code equivalent: high-level architectural components down to individual files and functions."