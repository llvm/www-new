technical_talks:
- title: "ONNX-MLIR: An MLIR-based Compiler for ONNX AI models"
  speaker: "Tung D. Le"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/le-onnx.pdf"
  video_url: "https://youtu.be/cXHTu2wI5Ps"
  description: "Open Neural Network Exchange (ONNX) is an open standard for representing deep neural networks, and MLIR is emerging as a flexible compiler infrastructure. In this talk, we present a technical report on our open-source compiler, namely ONNX-MLIR, which uses MLIR to compile ONNX models into native code on different architectures e.g., x86, IBM Power, IBM Z. We will discuss the core design of ONNX-MLIR, the optimizations it deploys, and how it supports custom AI accelerators. ONNX-MLIR has been developed since 2019, shortly after MLIR was introduced. Thus, we would also like to discuss some lessons learned when building ONNX-MLIR in parallel with the growth of MLIR compiler infrastructure."

- title: "Sanitizing MLIR Programs with Runtime Operation Verification"
  speaker: "Matthias Springer"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/springer-sanitizing.pdf"
  video_url: "https://youtu.be/O1nGbW6hKBU"
  description: "Operation verification is a core MLIR feature and a powerful tool for building robust compilers. MLIR verifies all operations between pass boundaries, but only static invariants based on compile-time information can be verified. This talk shows how to additionally verify operations at runtime, ranging from low-level properties such as out-of-bounds accesses into tensors/memrefs to high-level properties such as mismatching tensor shapes on linalg structured operations. This talk will also show how to build a memory leak sanitizer based on runtime operation verification."

- title: "Data-Tiling in IREE: Achieving High Performance Through Compiler Design"
  speaker: "Han-Chung Wang"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/wang-data-tilling.pdf"
  video_url: "https://youtu.be/iANJWUL_SOo"
  description: "This talk explores how IREE, a retargetable MLIR-based compiler for tensor programs, achieves high performance through data-tiling. By rearranging input data into target-specific layouts and utilizing tensor encodings, IREE bridges the gap between host and device. These encodings enable efficient data handling and unlock optimizations like folding, fusion, and propagation, which reduce the cost of relayouting operations. Learn how IREE integrates data-tiling to optimize performance in a compiler context."

- title: "Safety at Scale: Advancing Safety with hundreds of millions of lines of C++"
  speaker: "Kinuko Yasuda"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/yasuda-safety.pdf"
  video_url: "https://youtu.be/BUhYJtAq1n8"
  description: "Memory safety is increasingly recognized as a top priority in the industry, and the adoption of memory-safe languages for new code has become a key common methodology. However, significantly improving the safety of large existing C++ codebases remains a major challenge. In this talk, I will share our recent experience deploying several safety improvements across our C++ codebase at Google. Specifically, I will talk about the deployment of hardened libc++, and explain a series of improvements and extensions we made to Clang’s compile-time pointer lifetime analysis around lifetimebound annotations. By enabling hardened libc++ in all of our products, and adopting the annotations in our key core libraries, we have been able to reduce a significant number of safety violations, and improve the reliability and correctness of our code. I will also touch on ongoing efforts and future work in this area."

- title: "LLVM vs. GCC on RISC-V Using SPEC CPU Benchmarks: Methods, Gaps, and Optimizations"
  speaker: "Yongtai Li"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/li-risc.pdf"
  video_url: "https://youtu.be/T30hxDUqfVY"
  description: "This work details a systematic approach for comparing LLVM and GCC compilers on RISC-V using SPEC CPU 2006 and 2017 benchmarks, with full results disclosed for the 2017 suite. We expose critical performance gaps through code size, dynamic instruction counts (DIC), and vectorization efficiency, while proposing actionable fixes for compiler-specific inefficiencies."

- title: "Breaking std::vector's ABI for performance gains: A Horror Story"
  speaker: "Christopher Di Bella"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/di-bella-vector.pdf"
  video_url: "https://youtu.be/RKdkHwbgXfY"
  description: "This talk chronicles the story of modifying std::vector to directly track its size instead of its allocated buffer, and the associated performance improvements we gained as a result. We’ll also tell the story of applying these changes to libc++ so that it can be upstreamed, and the far more terrifying story of addressing any and all downstream reliance on the previous implementation quirks of vector to see this optimisation deployed internally."

- title: "Understanding Tablegen generated files in LLVM Backend"
  speaker: "Prerona Chaudhuri"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/chaudhuri-tablegen.pdf"
  video_url: "https://youtu.be/vkVjIAlzdMw"
  description: "While working with LLVM, one needs to deal with tablegen generated files which are quite tricky to understand, especially for beginners. And its important to understand these files so that one can debug failures for eg: while building a new backend or adding a new feature in the backend. In this short technical talk, I would like to summarize the common and important tablegen generated files that we can encounter in the llvm backend, what is the semantics of the C++ generated code etc."

- title: "Reducing Code Size with Speculative Inlining"
  speaker: "Vincent Lee"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/lee-inlining.pdf"
  video_url: "https://youtu.be/lmpBcKu7teo"
  description: "Inlining has generally been seen as a critical optimization for performance at the cost of size. But, it can also be used for size optimizations in the mobile space. In this talk, we discuss a new inlining technique that explores the full set of inlining candidates to uncover cases where inlining will generate size improvements due to downstream simplifications. It uncovers beneficial inlining that the traditional cost modeling overlooks resulting in non-trivial app size and performance improvements."

- title: "LLVM in the Automotive Industry: Bringing Functional Safety to Open Source"
  speaker: "Wendi Urribarri"
  slides_url: "https://llvm.org/devmtg/2025-06/slides/technical-talk/urribarri-automotive.pdf"
  video_url: "https://youtu.be/wAQ1XBjXfog"
  description: "This talk explores the importance of functional safety in automotive software and the need to qualify compilers under ISO 26262 to prevent undetected errors. It looks into the challenges of ensuring compilers don’t introduce undetected errors and propose a collaborative, open-source approach to qualifying LLVM. Attendees will gain insights into the qualification process, key challenges, and the benefits of making safety compliance more accessible. Let’s discuss how we can align LLVM with industry standards and enable its broader adoption in safety-critical systems."